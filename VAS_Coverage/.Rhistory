summary(congo_hh$distance_nearest_facility_km)
summary(congo_ch$distance_nearest_facility_km)
summary(congo_hh$distance_nearest_pubfacility_km)
summary(congo_ch$distance_nearest_pubfacility_km)
# DISTANCE GROUPS DUMMY VARIABLE # # # # # # # # # # # # # # # # # # # # # # # # # # #
congo_hh$distance_group = cut(congo_hh$distance_nearest_facility_km,
breaks = quantile(congo_hh$distance_nearest_facility_km, probs = 0:10/10, na.rm = TRUE),
include.lowest = TRUE, labels = FALSE)
table(congo_hh$distance_group)
summary(congo_hh$distance_nearest_facility_km)
library(dplyr)
library(Hmisc)
congo_hh_aggregated = congo_hh %>%
group_by(region_id, residence) %>%
summarise(
min_distance_km = weighted.mean(distance_nearest_facility_km, wt, na.rm = TRUE, trim = 0),
mean_distance_km  = weighted.mean(distance_nearest_facility_km, wt, na.rm = TRUE),
median_distance_km = wtd.quantile(distance_nearest_facility_km, weights = wt, probs = 0.5, na.rm = TRUE),
q1_distance_km = wtd.quantile(distance_nearest_facility_km, weights = wt, probs = 0.25, na.rm = TRUE),
q3_distance_km = wtd.quantile(distance_nearest_facility_km, weights = wt, probs = 0.75, na.rm = TRUE),
max_distance_km = max(distance_nearest_facility_km, na.rm = TRUE),
Percentile_5 = wtd.quantile(distance_nearest_facility_km, weights = wt, probs = 0.05, na.rm = TRUE),
Percentile_95 = wtd.quantile(distance_nearest_facility_km, weights = wt, probs = 0.95, na.rm = TRUE),
distance_public_km = wtd.quantile(distance_nearest_pubfacility_km, weights = wt, probs = 0.5, na.rm = TRUE),
distance_group = as.integer(names(sort(table(distance_group), decreasing = TRUE)[1]))
) %>%
ungroup()
final_data = as.data.frame(final_data)
final_data$region_id = as.character(final_data$region_id)
congo_hh_aggregated = as.data.frame(congo_hh_aggregated)
congo_hh_aggregated$region_id = as.character(congo_hh_aggregated$region_id)
final_data = left_join(final_data, congo_hh_aggregated, by = c("region_id", "residence"))
wealth_aggregated = congo_hh %>%
group_by(region_id, residence) %>%
summarise(
Total_Weight = sum(wt),  # Sum of weights for normalization
Weighted_Poorer = sum(wt * (wealth == 1)),
Weighted_Richest = sum(wt * (wealth == 5)),
Poorer = Weighted_Poorer / Total_Weight,  # Proportion of Poorer
Richest = Weighted_Richest / Total_Weight,  # Proportion of Richest
.groups = 'drop'
)
wealth_aggregated$region_id = as.character(wealth_aggregated$region_id)  # Ensure region_id is character if necessary
wealth_aggregated = wealth_aggregated[, -c(3, 4, 5)]; wealth_aggregated
final_data = left_join(final_data, wealth_aggregated, by = c("region_id", "residence")); final_data
path = 'C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/VAS_Coverage/results/'
openxlsx::write.xlsx(final_data,  paste(path,'congo_coverage.xlsx', sep = ''))
final_data_older_24 = filter(final_data, child_age_dummy == 1)
final_data_younger_24 = filter(final_data, child_age_dummy == 0)
summary(final_data_older_24$vas_coverage)
summary(final_data_younger_24$vas_coverage)
# FINAL FILTERED CHILDREN DATASET # # # # # # # # # # # # # # # # # # # # # # # # # # #
final_data$residence_binary = ifelse(final_data$residence == "Urban", 1, 0)
congo_ch$residence_binary = as.numeric(congo_ch$residence_binary)
congo_ch$region_id = as.numeric(congo_ch$region_id)
final_data$residence_binary = as.numeric(as.character(final_data$residence_binary))
final_data$region_id = as.numeric(as.character(final_data$region_id))
summary(final_data$vas_coverage)
hist(final_data$vas_coverage)
quantile_breaks = quantile(final_data$vas_coverage, probs = c(0, 0.5, 0.6, 0.7, 0.8, 0.9, 1), na.rm = TRUE)
final_data$vas_coverage_group = cut(final_data$vas_coverage,
breaks = quantile_breaks,
include.lowest = TRUE,
labels = FALSE,
right = TRUE)
table(final_data$vas_coverage_group, useNA = "ifany")
final_data
names(final_data)
names(congo_ch)
nrow(congo_ch); nrow(final_data)
keys = c("region_id", "residence", "country", "child_age_dummy")
congo_ch_2 = merge(congo_ch, final_data, by = keys, all.x = TRUE); names(congo_ch_2)
table(congo_ch_2$region_id)
table(congo_ch_2$distance_group) # 1 == less coverage, to 10 == more coverage, quantile(1:10)
summary(congo_ch_2$distance_nearest_facility_km)
table(congo_ch_2$wealth)
table(congo_ch_2$distance_facility)
table(congo_ch_2$vas_coverage_group) # 1 == -50% coverage, to 5 == +90% coverage, quantile(1:6)
path = 'C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/VAS_Coverage/results/'
write.csv(congo_ch_2, paste(path,'congo_ch_final.csv', sep = ''))
st_write(congo_ch_2, paste(path,'congo_ch_final.gpkg', sep = ''), append = FALSE)
rm(list=setdiff(ls(), c("congo_ch_2", "congo_fa_GIS", "congo_hh_GIS")))
# # # ESTIMATE DE IMPACT ON VAS_Coverage # # #
# Analyze the impact of distance in VAS_Coverage
congo = congo_ch_2; names(congo)
congo = rename(congo, vas = child_vitA_last6m,
residence_binary = residence_binary.x
); names(congo)
congo$vas = case_when(congo$vas == 2 ~ 0,
congo$vas == 3 ~ 0,
TRUE ~ congo$vas)
congo$vas = as.integer(congo$vas)
class(congo); class(congo$vas)
table(congo$vas)
table(congo$wealth)
congo$wealth_factor = factor(congo$wealth,
levels = c(1, 2, 3, 4, 5),
labels = c("Poorest", "Poorer", "Middle", "Richer", "Richest"))
# BINOMIAL MODEL DISTANCE & WEALTH #
form1 = vas ~ median_distance_km + wealth_factor + median_distance_km:wealth_factor
form1 = as.formula(form1)
probit1 = glm(form1, family = binomial(link = "probit"), data = congo, weights = wt, x = TRUE)
summary(probit1)
summary(congo$vas - probit1$fitted.values)
summary(congo$median_distance_km)
coefficients1 = probit1$coefficients; coefficients1
# For every one-unit increase in distance_group, vas_coverage is expected to decrease by B1 == %%
ma_effect1 = erer::maBina(probit1, x.mean = TRUE, rev.dum = TRUE, digits = 3, subset.name = NULL, subset.value); print(ma_effect1)
# BINOMIAL MODEL DISTANCE #
form2 = vas ~ median_distance_km
form2 = as.formula(form2)
probit2 = glm(form2, family = binomial(link = "probit"), data = congo, weights = wt, x = TRUE)
summary(probit2)
summary(congo$vas - probit2$fitted.values)
summary(congo$median_distance_km)
coefficients2 = probit2$coefficients; coefficients2
# For every one-unit increase in distance_group, vas_coverage is expected to decrease by B1 == %%
ma_effect2 = erer::maBina(probit2, x.mean = TRUE, rev.dum = TRUE, digits = 3, subset.name = NULL, subset.value); print(ma_effect2)
# BINOMIAL ln(MODEL DISTANCE) & ln(WEALTH) #
form3 = vas ~ log(median_distance_km) + log(wealth)
form3 = as.formula(form3)
probit3 = glm(form3, family = binomial(link = "probit"), data = congo, weights = wt, x = TRUE)
summary(probit3)
summary(congo$vas - probit3$fitted.values)
summary(congo$median_distance_km)
coefficients3 = probit3$coefficients; coefficients3
# For every one-unit increase in distance_group, vas_coverage is expected to decrease by B1 == %%
ma_effect3 = erer::maBina(probit3, x.mean = TRUE, rev.dum = TRUE, digits = 3, subset.name = NULL, subset.value); print(ma_effect3)
# Save results
setwd("C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/VAS_Coverage/results/"); getwd()
dir.create("congo_probit")
coefficients1 = as.table(coefficients1)
coefficients2 = as.table(coefficients2)
coefficients3 = as.table(coefficients3)
coefficients1 = as.data.frame(coefficients1)
coefficients2 = as.data.frame(coefficients2)
coefficients3 = as.data.frame(coefficients3)
coefficients1 = rename(coefficients1, Variable = Var1, Coefficient = Freq); coefficients1
coefficients2 = rename(coefficients2, Variable = Var1, Coefficient = Freq); coefficients2
coefficients3 = rename(coefficients3, Variable = Var1, Coefficient = Freq); coefficients3
openxlsx::write.xlsx(coefficients1, 'congo_probit/congo_coefdistancewealth.xlsx')
openxlsx::write.xlsx(coefficients2, 'congo_probit/congo_coefdistance.xlsx')
openxlsx::write.xlsx(coefficients3, 'congo_probit/congo_coeflog.xlsx')
ma_effect1 = as.data.frame(ma_effect1$out,
rownames_to_column = c("(Intercept)", "median_distance_km",
"wealth_factorPoorer", "wealth_factorMiddle",
"wealth_factorRicher", "wealth_factorRichest",
"median_distance_km:wealth_factorPoorer",
"median_distance_km:wealth_factorMiddle",
"median_distance_km:wealth_factorRicher",
"median_distance_km:wealth_factorRichest"))
ma_effect1 = zoo::fortify.zoo(ma_effect1)
ma_effect1$Index = rownames(ma_effect1); ma_effect1
ma_effect2 = as.data.frame(ma_effect2$out,
row.names = c("(Intercept)", "median_distance_km"))
ma_effect2 = zoo::fortify.zoo(ma_effect2)
ma_effect2$Index = rownames(ma_effect2); ma_effect2
ma_effect3 = as.data.frame(ma_effect3$out,
row.names = c("(Intercept)", "log(median_distance_km)", "log(wealth)"))
ma_effect3 = zoo::fortify.zoo(ma_effect3)
ma_effect3$Index = rownames(ma_effect3); ma_effect3
openxlsx::write.xlsx(ma_effect1, 'congo_probit/congo_medistancewealth.xlsx')
openxlsx::write.xlsx(ma_effect2, 'congo_probit/congo_medistance.xlsx')
openxlsx::write.xlsx(ma_effect3, 'congo_probit/congo_melog.xlsx')
rm(list=setdiff(ls(), "congo"))
# # # #
table(congo$region)
congo$region_name = case_when(congo$region_id == 1 ~ "Kinshasa",
congo$region_id == 2 ~ "Bandundu",
congo$region_id == 3 ~ "Bas_Congo",
congo$region_id == 4 ~ "Equateur",
congo$region_id == 5 ~ "Kasai_Occidental",
congo$region_id == 6 ~ "Kasai_Oriental",
congo$region_id == 7 ~ "Katanga",
congo$region_id == 8 ~ "Maniema",
congo$region_id == 9 ~ "Nord_Kivu",
congo$region_id == 10 ~ "Orientale",
congo$region_id == 11 ~ "Sud_Kivu")
table(congo$region_name)
names(congo)
# Probit by regions
summary(congo$vas_coverage) # children's VAS_Coverage in %
table(congo$vas) # dummy 0 == NO Vit A delivered, 1 == YES Vit A delivered
table(congo$region_id)
table(congo$region_name)
table(congo$residence)
table(congo$residence_binary) # Rural == 0, Urban == 1
summary(congo$median_distance_km) # median distance housholds to nearest medical facility
table(congo$wealth_factor) # children's household wealth
table(congo$wealth)
congo$region_id = as.factor(congo$region_id)
congo$residence_rural = ifelse(congo$residence_binary == 0, 1, 0)
form = vas ~ child_age_dummy + median_distance_km + wealth_factor + residence_rural + region_id
form = as.formula(form); form
probit_reg = glm(form, family = binomial(link = "probit"), data = congo, weights = wt, x = TRUE)
summary(probit_reg)
confint_table = confint(probit_reg, level = 0.95); confint_table
coefficients_table = summary(probit_reg)$coefficients; coefficients_table
coefficients_df = as.data.frame(coefficients_table); coefficients_df
coefficients_df$Variable = rownames(coefficients_df); coefficients_df
colnames(coefficients_df) = c("Estimate", "Std. Error", "z value", "P-value", "Variable"); names(coefficients_df)
coefficients_df = coefficients_df[c("Variable", "Estimate", "Std. Error", "z value", "P-value")]; names(coefficients_df)
openxlsx::write.xlsx(coefficients_df, "congo_probit/regprob_coefficients_table.xlsx")
openxlsx::write.xlsx(as.data.frame(confint_table), file = "congo_probit/regprob_confint_table.xlsx", sheetName = "Confidence Intervals", rowNames = TRUE)
# Test Random Forest
setwd("C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/VAS_Coverage/"); getwd()
congo_limits = st_read("data_files/Congo/GPS/congo_limits/congo_limits.shp"); names(congo_limits)
library(caret)
library(raster)
library(sf)
library(doParallel)
library(foreach)
names(congo)
summary(congo$geometry)
names(congo_limits)
summary(congo_limits$geometry)
table(congo$region_id)
table(congo$region_name)
table(congo_limits$NAME_1)
congo_limits = congo_limits %>%
mutate(NAME_1 = case_when(
NAME_1 %in% c("Mai-Ndombe", "Kwilu", "Kwilu", "Kwango") ~ "Bandundu",
NAME_1 %in% c("Kongo-Central", "Kwango") ~ "Bas_Congo",
NAME_1 %in% c("Équateur", "Equateur", "Tshuapa", "Mongala", "Nord-Ubangi", "Sud-Ubangi") ~ "Equateur",
NAME_1 %in% c("Kasai", "Kasaï", "Kasaï-Central") ~ "Kasai_Occidental",
NAME_1 %in% c("Kasaï-Oriental", "Kasai Oriental", "Lomami", "Sankuru") ~ "Kasai_Oriental",
NAME_1 %in% c("Lualaba", "Haut-Lomami", "Tanganyika", "Haut-Katanga") ~ "Katanga",
NAME_1 %in% c("Bas-Uele", "Tshopo", "Ituri", "Haut-Uele") ~ "Orientale",
NAME_1 %in% c("Nord-Kivu") ~ "Nord_Kivu",
NAME_1 %in% c("Sud-Kivu") ~ "Sud_Kivu",
TRUE ~ NAME_1
))
table(congo$region_name)
table(congo_limits$NAME_1)
congo_limits = congo_limits %>%
mutate(region_id = case_when(
NAME_1 == "Kinshasa"         ~ 1,
NAME_1 == "Bandundu"         ~ 2,
NAME_1 == "Bas_Congo"        ~ 3,
NAME_1 == "Equateur"         ~ 4,
NAME_1 == "Kasai_Occidental" ~ 5,
NAME_1 == "Kasai_Oriental"   ~ 6,
NAME_1 == "Katanga"          ~ 7,
NAME_1 == "Maniema"          ~ 8,
NAME_1 == "Nord_Kivu"        ~ 9,
NAME_1 == "Orientale"        ~ 10,
NAME_1 == "Sud_Kivu"         ~ 11
))
table(congo_limits$region_id)
summary(congo$vas_coverage)
congo$vas_coverage = replace(congo$vas_coverage, is.na(congo$vas_coverage), 0); summary(congo$vas_coverage)
table(congo$child_age_dummy) # if child is above 24 months old == 1, 0 if under
summary(congo$median_distance_km) # median distance to nearest facility
table(congo$wealth_factor) # children living in household's wealth
table(congo$residence_rural) # == 1 if children lives in rural, == 0 if urban
set.seed(123)
form = vas_coverage ~ child_age_dummy + median_distance_km + wealth_factor + residence_rural + region_id
form = as.formula(form)
vars = c("vas_coverage", "child_age_dummy", "median_distance_km", "wealth_factor", "residence_rural", "region_id")
sapply(congo[vars], function(x) sum(is.na(x))) # Check for missing values in these variables
impute_value = function(x) {
if(is.numeric(x)) {
return(ifelse(is.na(x), median(x, na.rm = TRUE), x))
} else {
mode = names(which.max(table(x)))
return(ifelse(is.na(x), mode, x))
}
}
congo[vars] = lapply(congo[vars], impute_value)
sapply(congo[vars], function(x) sum(is.na(x)))
split = createDataPartition(congo$vas_coverage, p = 0.75, list = FALSE)[,1]
train_set = congo[split, ]
test_set = congo[-split, ]
sapply(train_set[vars], function(x) sum(is.na(x)))
numCores = parallel::detectCores()
registerDoParallel(cores = numCores)
train_control = trainControl(method = "cv", number = 10, allowParallel = TRUE)
{
model = train(form,
data = train_set,
method = "rf",
trControl = train_control)
print(model)
stopImplicitCluster()
}
predictions = predict(model, newdata = test_set)
summary(predictions)
test_set$predicted_vas_coverage = predictions
region_coverage = aggregate(predicted_vas_coverage ~ region_id, data = test_set, mean)
unique(test_set$region_id)
unique(congo_limits$region_id)
congo_limits$region_id = as.character(congo_limits$region_id)
region_coverage$region_id = as.character(region_coverage$region_id)
congo_limits = merge(congo_limits, region_coverage, by = "region_id", all.x = TRUE)
str(congo_limits)
summary(congo_limits$predicted_vas_coverage)
congo_limits$predicted_vas_coverage[is.na(congo_limits$predicted_vas_coverage)] = 0
library(viridis)
summary(congo_limits$predicted_vas_coverage)
breaks = c(0, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 1)
color_count = length(breaks) - 1
colors = viridis::viridis(color_count)
coverage_map = mapview(congo_limits, zcol = "predicted_vas_coverage",
col.regions = colors,
at = breaks, alpha.regions = 1)
print(coverage_map)
library(ggplot2)
library(sf)
gg_map = ggplot() +
geom_sf(data = congo_limits, aes(fill = predicted_vas_coverage), colour = "white", size = 0.2) +
scale_fill_viridis_c(
name = "Predicted VAS_Coverage %",
breaks = breaks[-length(breaks)],
labels = scales::percent(breaks[-length(breaks)]),
limits = c(0, 1),
guide = guide_legend(title.position = "top")
) +
labs(
title = "Random Forest Model: Predicted VAS_Coverage",
subtitle = "Vas_Coverage = Child_Age + Distance_NearFa + HH_Wealth_Factor + Residence_Rural + Region_Incidence",
caption = "Data source: GADM | DHS Survey Datasets"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
print(gg_map)
setwd("C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/"); getwd()
ggsave("Maps/Predicted_VAS_Coverage_Congo.png", gg_map, width = 10, height = 8, dpi = 300)
rm(list=setdiff(ls(), c("congo", "congo_limits")))
setwd("C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/VAS_Coverage/"); getwd()
summary(congo$cluster) # clusters that group children/households across survey
summary(congo$vas_coverage) # Vit A Sup Coverage in %
names(congo) # children/households points dataset
names(congo_limits) # country regions layer dataset
hist(congo$vas_coverage)
hist_vas = ggplot(congo, aes(x=vas_coverage)) +
geom_histogram(bins=30, fill=rgb(1, 0, 0, 0.5), color="black") +
scale_x_continuous(breaks=seq(0, 1, by=0.1), limits=c(0, 1)) +
labs(x = "VAS_Coverage (%)",
y = "Number of Children (6-59 months)",
title = "DRC Children VAS_Coverage Distribution",
caption = "Data source: DHS Survey Datasets") +
theme_minimal() +  # Use a minimal theme for a clean look
theme(plot.caption = element_text(hjust=0, face="italic"))  # Align and style the caption text
print(hist_vas)
ggsave("results/histogram_vascov_congo.png", hist_vas, width = 10, height = 8, dpi = 300)
# Vas_Coverage by clusters
cluster_summary = congo %>%
group_by(cluster) %>%
filter(vas_coverage != 0) %>%
summarise(
vas_coverage = median(vas_coverage),
distance = distance_nearest_facility_km,
distance_pub = (distance_nearest_pubfacility_km*1.10),
total_weight = sum(wt, na.rm = TRUE),
.groups = 'drop'
); summary(cluster_summary)
cluster_summary$distance[is.na(cluster_summary$distance)] = median(cluster_summary$distance)
cluster_summary$distance_pub[is.na(cluster_summary$distance_pub)] = median(cluster_summary$distance_pub)
summary(cluster_summary)
congo_clusters = congo %>%
distinct(cluster, .keep_all = TRUE) %>%
st_as_sf()
cluster_summary = cluster_summary %>%
left_join(congo_clusters %>% dplyr::select(cluster, geometry), by = "cluster")
cluster_summary = st_as_sf(cluster_summary, sf_column_name = "geometry"); str(cluster_summary)
congo_limits = st_as_sf(congo_limits)
summary(cluster_summary$vas_coverage)
library(RColorBrewer)
library(scales)
breaks = c(0, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1)
labels = scales::percent(breaks)
gg_map_vas = ggplot() +
geom_sf(data = congo_limits, fill = NA, color = "gray", size = 0.2) +
geom_sf(data = cluster_summary, aes(fill = vas_coverage, size = total_weight), shape = 21, alpha = 0.8) +
scale_fill_gradientn(colors = brewer.pal(11, "RdYlGn"),
values = rescale(breaks, to = c(0, 1)),
breaks = breaks,
labels = labels,
limits = c(0, 1),
name = "VAS_Coverage") +
scale_size(range = c(3, 15), name = "Total Children Weight") +
labs(
title = "DRC Average VAS_Coverage by Cluster | Children 6-59 months old",
subtitle = "Vitamin A Supplementation Coverage",
caption = "Data source: GADM | DHS Survey Datasets"
) +
theme_minimal() +
guides(color = guide_colorbar(), size = guide_legend(), fill = guide_colorbar())
print(gg_map_vas)
setwd("C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/"); getwd()
ggsave("Maps/Cluster_VAS_Coverage_Congo.png", gg_map_vas, width = 10, height = 8, dpi = 300)
# Vas_Coverage by clusters for children under and above 24 months old
table(congo$child_age_dummy) # comes from ifelse(congo_child$child_age >= 24, 1, 0)
# under 24 months
cluster_summary_under24 = congo %>%
filter(child_age_dummy == 0, vas_coverage > 0) %>%
group_by(cluster) %>%
filter(vas_coverage != 0) %>%
summarise(
vas_coverage = median(vas_coverage),
distance = distance_nearest_facility_km,
distance_pub = (distance_nearest_pubfacility_km*1.10),
total_weight = sum(wt, na.rm = TRUE),
.groups = 'drop'
); summary(cluster_summary_under24)
cluster_summary_under24$distance[is.na(cluster_summary_under24$distance)] = median(cluster_summary_under24$distance)
cluster_summary_under24$distance_pub[is.na(cluster_summary_under24$distance_pub)] = median(cluster_summary_under24$distance_pub)
summary(cluster_summary_under24)
cluster_summary_under24 = cluster_summary_under24 %>%
left_join(congo_clusters %>% dplyr::select(cluster, geometry), by = "cluster")
cluster_summary_under24 = st_as_sf(cluster_summary_under24, sf_column_name = "geometry")
# above 24 months
cluster_summary_above24 = congo %>%
filter(child_age_dummy == 1, vas_coverage > 0) %>%
group_by(cluster) %>%
filter(vas_coverage != 0) %>%
summarise(
vas_coverage = median(vas_coverage),
distance = distance_nearest_facility_km,
distance_pub = (distance_nearest_pubfacility_km*1.10),
total_weight = sum(wt, na.rm = TRUE),
.groups = 'drop'
); summary(cluster_summary_above24)
cluster_summary_above24$distance[is.na(cluster_summary_above24$distance)] = 11.105
cluster_summary_above24$distance_pub[is.na(cluster_summary_above24$distance_pub)] = 17.101
summary(cluster_summary_above24)
cluster_summary_above24 = cluster_summary_above24 %>%
left_join(congo_clusters %>% dplyr::select(cluster, geometry), by = "cluster")
cluster_summary_above24 = st_as_sf(cluster_summary_above24, sf_column_name = "geometry")
gg_map_vas_under24 = ggplot() +
geom_sf(data = congo_limits, fill = NA, color = "gray", size = 0.2) +
geom_sf(data = cluster_summary_under24, aes(fill = vas_coverage, size = total_weight), shape = 21, alpha = 0.8) +
scale_fill_gradientn(colors = brewer.pal(11, "RdYlGn"),
values = rescale(breaks, to = c(0, 1)),
breaks = breaks,
labels = labels,
limits = c(0, 1),
name = "VAS_Coverage") +
scale_size(range = c(3, 15), name = "Total Children Weight") +
labs(
title = "DRC Average VAS_Coverage by Cluster | Children 6-24 months old",
subtitle = "Vitamin A Supplementation Coverage",
caption = "Data source: GADM | DHS Survey Datasets"
) +
theme_minimal() +
guides(color = guide_colorbar(), size = guide_legend(), fill = guide_colorbar())
print(gg_map_vas_under24)
ggsave("Maps/VAS_Coverage_Under24_Congo.png", gg_map_vas_under24, width = 10, height = 8, dpi = 300)
summary(cluster_summary_above24$vas_coverage)
gg_map_vas_above24 = ggplot() +
geom_sf(data = congo_limits, fill = NA, color = "gray", size = 0.2) +
geom_sf(data = cluster_summary_above24, aes(fill = vas_coverage, size = total_weight), shape = 21, alpha = 0.8) +
scale_fill_gradientn(colors = brewer.pal(11, "RdYlGn"),
values = rescale(breaks, to = c(0, 1)),
breaks = breaks,
labels = labels,
limits = c(0, 1),
name = "VAS_Coverage") +
scale_size(range = c(3, 15), name = "Total Children Weight") +
labs(
title = "DRC Average VAS_Coverage by Cluster | Children 24-59 months old",
subtitle = "Vitamin A Supplementation Coverage",
caption = "Data source: GADM | DHS Survey Datasets"
) +
theme_minimal() +
guides(color = guide_colorbar(), size = guide_legend(), fill = guide_colorbar())
print(gg_map_vas_above24)
ggsave("Maps/VAS_Coverage_Above24_Congo.png", gg_map_vas_above24, width = 10, height = 8, dpi = 300)
# Histogram
hist_vas_sep = ggplot() +
geom_histogram(data = cluster_summary_under24, aes(x = vas_coverage, fill = "6-24 months"), bins = 30, alpha = 0.5) +
geom_histogram(data = cluster_summary_above24, aes(x = vas_coverage, fill = "24-59 months"), bins = 30, alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.1), limits = c(0, 1)) +
scale_fill_manual(values = c("6-24 months" = rgb(1, 0, 0, 0.5), "24-59 months" = rgb(0, 0, 1, 0.5)),
name = "Age Group",
labels = c("6-24 months", "24-59 months")) +
labs(x = "VAS_Coverage (%)",
y = "Children",
title = "VAS_Coverage Distribution by Age Group",
subtitle = "Red: 6-24 months, Blue: 24-59 months") +
theme_minimal() +
guides(fill = guide_legend(title = "Age Group",
override.aes = list(colour = c("red", "blue"), size = 4))) +
theme(legend.position = "topright")
print(hist_vas_sep)
setwd("C:\\Users\\stefa\\Documents\\Code\\VAS_Optimization/VAS_Coverage/"); getwd()
ggsave("results/histogram_vassep_congo.png", hist_vas_sep, width = 10, height = 8, dpi = 300)
# For Nearest Facility by Clusters with adjusted scale
gg_map_distance = ggplot() +
geom_sf(data = congo_limits, fill = NA, color = "gray", size = 0.2) +
geom_sf(data = cluster_summary, aes(fill = distance, color = distance, size = total_weight), shape = 21, alpha = 0.8) +
scale_color_gradientn(colors = c("#1B9E77", "yellow", "#D95F02"),
values = rescale(c(0, 60, 125), to = c(0, 1)),
name = "Distance to nearest facility (km)",
limits = c(0, 125),
breaks = c(0, 30, 60, 90, 125),
labels = c("0 km", "30 km", "60 km", "90 km", "125 km")) +
scale_fill_gradientn(colors = c("#1B9E77", "yellow", "#D95F02"),
values = rescale(c(0, 60, 125), to = c(0, 1))) +
scale_size(range = c(3, 15), name = "Total Children Weight") +
labs(
title = "DRC Distance to Nearest Health Facility by Cluster",
subtitle = "Colored by distance in kilometers",
caption = "Source: GADM | DHS Survey Datasets"
) +
theme_minimal() +
guides(color = guide_colorbar(), size = guide_legend(), fill = FALSE)
print(gg_map_distance)
